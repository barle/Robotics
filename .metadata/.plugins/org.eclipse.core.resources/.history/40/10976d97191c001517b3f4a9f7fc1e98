/*
 * Robot.cpp
 *
 *  Created on: May 26, 2015
 *      Author: colman
 */

#include "Robot.h"

Robot::Robot(string ip, int port, Position *start, int mapHeight, int mapWidth) : _pc(ip, port), _pp(&_pc), _lp(&_pc) {
	_mapHeight = mapHeight;
	_mapWidth = mapWidth;

	double x = denormalizeX(start->X());
	double y = denormalizeY(start->Y());
	double yaw = start->Yaw();

	_pos = new Position(x, y, yaw);
}

Robot::~Robot() {
	// TODO Auto-generated destructor stub
}

void Robot::setSpeed(float linear, float angular)
{
	_pp.SetSpeed(linear, angular);
}

float Robot::normalizeX(float x)
{
	float xNormalized = (_mapWidth/(float)MAP_X_SIZE)*(x + (MAP_X_SIZE/2));
	return xNormalized;
}

float Robot::normalizeY(float y)
{
	float yNormalized = -(_mapHeight/(float)MAP_Y_SIZE)*(y + (MAP_Y_SIZE/2));
	return yNormalized;
}

float Robot::denormalizeX(float x)
{
	float xDenormalized = (x/(_mapWidth/(float)MAP_X_SIZE)) - (MAP_X_SIZE/2);
	return xDenormalized;
}

float Robot::denormalizeY(float y)
{
	float yDenormalized = (-y/(_mapHeight/(float)MAP_Y_SIZE)) - (MAP_Y_SIZE/2);
	return yDenormalized;
}

float Robot::getX()
{
	return normalizeX(_pos->X());
}

float Robot::getY()
{
	return normalizeY(_pos->Y());
}

float Robot::getYaw()
{
	return _pos->Yaw();
}

float* Robot::getLaserScan()
{
	unsigned int samplesCount = _lp.GetCount();
	float *scan = new float[samplesCount];
	for (unsigned int i = 0; i < samplesCount; i++)
	{
		scan[i] = _lp[i];
	}
	return scan;
}

void Robot::SetDeltaValues(double &deltaX, double &deltaY, double &deltaYaw)
{
	double newX = _pp.GetXPos();
	double newY = _pp.GetYPos();
	double newYaw = _pp.GetYaw();

	// Put deltas
	if (this->_pos->X() != 0 || this->_pos->Y() != 0 || this->_pos->Yaw() != 0)
	{
		deltaX = newX - this->_pos->X();
		deltaY = newY - this->_pos->Y();
		deltaYaw = newYaw - this->_pos->Yaw();
	}
	else
	{
		deltaX = 0;
		deltaY = 0;
		deltaYaw = 0;
	}

	this->_pos->Update(newX, newY, newYaw);
}

int Robot::deg_to_index(double deg)
{
	return (deg + 120) / 0.36;
}

void Robot::read()
{
	_pc.Read();
}
