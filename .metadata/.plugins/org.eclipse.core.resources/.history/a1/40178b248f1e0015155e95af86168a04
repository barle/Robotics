/*
 * Robot.cpp
 *
 *  Created on: May 26, 2015
 *      Author: colman
 */

#include "Robot.h"

Robot::Robot(string ip, int port, Position *startInPixel, int mapHeightInPixel, int mapWidthInPixel, double mapResolutionInMeters) : _pc(ip, port), _pp(&_pc), _lp(&_pc) {
	_mapHeightInPixel = mapHeightInPixel;
	_mapWidthInPixel = mapWidthInPixel;
	_mapResolutionInMeters = mapResolutionInMeters;

	float yaw = _map->convertDegreeToRadian(startInPixel->Yaw());

	_pp.SetOdometry(0,0,yaw); // do this to intialize the yaw in the robot's odometry
	_startInPixel = startInPixel;
	_lastPosInPixel = new Position(
			startInPixel->X(),
			startInPixel->Y(),
			startInPixel->Yaw());

	//init dummy painter:
	_dummyPainter = new PlayerClient("localhost",6666);
	_gp = new Graphics2dProxy(_dummyPainter);
}

Robot::~Robot() {
	// TODO Auto-generated destructor stub
}

void Robot::setSpeed(float linear, float angular)
{
	_pp.SetSpeed(linear, angular);
}

float Robot::getX()
{
	return _startInPixel->X() + _map->convertMeterToPixel(_pp.GetXPos());
}

float Robot::getY()
{
	return _startInPixel->Y() - _map->convertMeterToPixel(_pp.GetYPos());
}

float Robot::getYaw()
{
	return _startInPixel->Yaw() + _map->convertRadianToDegree(_pp.GetYaw());
}

float* Robot::getLaserScan()
{
	unsigned int samplesCount = _lp.GetCount();
	float *scan = new float[samplesCount];
	for (unsigned int i = 0; i < samplesCount; i++)
	{
		scan[i] = _lp[i];
	}
	return scan;
}

void Robot::SetDeltaValues(double &deltaXInPixel, double &deltaYInPixel, double &deltaYawInDegree)
{
	double newXInPixel = this->getX();
	double newYInPixel = this->getY();
	double newYawInDegree = this->getYaw();

	deltaXInPixel = newXInPixel - _lastPosInPixel->X();
	deltaYInPixel = newYInPixel - _lastPosInPixel->Y();
	deltaYawInDegree = newYawInDegree - _lastPosInPixel->Yaw();

	this->_lastPosInPixel->Update(newXInPixel, newYInPixel, newYawInDegree);
}

int Robot::deg_to_index(double deg)
{
	return (deg + 120) / 0.36;
}

void Robot::read()
{
	_pc.Read();
}

void Robot::drawPoint(float x, float y, float size, int red, int blue, int green)
{
	float boxSize = convertPixelToMeter(size);
	player_point_2d_t points[5];
	points[0].px = convertPixelToMeter(x) - boxSize;
	points[0].py = -convertPixelToMeter(y) + boxSize;

	points[1].px = convertPixelToMeter(x) + boxSize;
	points[1].py = -convertPixelToMeter(y) + boxSize;

	points[2].px = convertPixelToMeter(x) + boxSize;
	points[2].py = -convertPixelToMeter(y) - boxSize;

	points[3].px = convertPixelToMeter(x) - boxSize;
	points[3].py = -convertPixelToMeter(y) - boxSize;

	points[4].px = convertPixelToMeter(x) - boxSize;
	points[4].py = -convertPixelToMeter(y) + boxSize;

	player_color_t color;
	color.red = red;
	color.blue = blue;
	color.green = green;
	_gp->DrawPolygon(points, 5, true, color);
}

void Robot::ClearParticles()
{
	_gp->Clear();
}
