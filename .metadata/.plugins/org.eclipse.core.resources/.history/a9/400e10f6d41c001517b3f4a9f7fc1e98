/*
 * GoToBase.cpp
 *
 *  Created on: Jun 27, 2015
 *      Author: colman
 */

#include "GoToBase.h"

GoToBase::GoToBase(Robot *robot, Position *goal) {
	this->_robot = robot;
	this->_goal = goal;
}

double GoToBase::getDistanceInMeter()
{
	float curXInPixel = this->_robot->getX();
	float curYInPixel = this->_robot->getY();

	float deltaXInPixel = _goal->X() - curXInPixel;
	float deltaYInPixel = curYInPixel - _goal->Y(); // the Y axis are reversed

	float deltaXInMeter = this->_robot->convertPixelToMeter(deltaXInPixel);
	float deltaYInMeter = this->_robot->convertPixelToMeter(deltaYInPixel);

	// check if we achieved the goal within the tolerance radius
	float distance = sqrt(pow(deltaXInMeter,2) + pow(deltaYInMeter,2));
	return distance;
}

double GoToBase::getDegree(double x, double y)
{
	double radian;
	if(x == 0 && y >= 0)
		radian = M_PI_2;
	else if(x == 0 && y < 0)
		radian = -M_PI_2;
	else
		radian = atan(y/x);

	double degree = this->_robot->convertRadianToDegree(radian);

	if(x >= 0 && y >=0) // I
	{
		while(!(degree >= 0 && degree <= 90))
		{
			degree += 180;
			if(degree > 360)
				degree -= 360;
		}
	}
	else if(x < 0 && y >=0) // II
	{
		while(!(degree >= 90 && degree <= 180))
		{
			degree += 180;
			if(degree > 360)
				degree -= 360;
		}
	}
	else if(x < 0 && y < 0) // III
	{
		while(!(degree >= 180 && degree <= 270))
		{
			degree += 180;
			if(degree > 360)
				degree -= 360;
		}
	}
	else
	{
		while(!(degree >= 270 && degree <= 360)) // IV
		{
			degree += 180;
			if(degree > 360)
				degree -= 360;
		}
	}
	return degree;
}


GoToBase::~GoToBase() {
	// TODO Auto-generated destructor stub
}

