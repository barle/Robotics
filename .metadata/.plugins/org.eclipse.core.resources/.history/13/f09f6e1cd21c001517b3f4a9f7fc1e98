/*
 * GoTo.cpp
 *
 *  Created on: Jun 26, 2015
 *      Author: colman
 */

#include "GoTo.h"
#include <cmath>

#define MAX_DIFF_YAW 20 // Degree
#define MAX_DIFF_RADIUS 0.05  // Meter

#define ANGULAR_SPEED 0.8
#define FORWARD_SPEED 1
#define TURN_SPEED 0

GoTo::GoTo(Robot *robot, Position *goal) : GoToBase(robot) {
	this->_goal = goal;
	this->_nextGoalBehavior = NULL;
}

void GoTo::setNextGoal(GoTo *goalBehavior)
{
	this->_nextGoalBehavior = goalBehavior;
}

void GoTo::action()
{
	this->_robot->setSpeed(FORWARD_SPEED, 0);
	return;
}


bool GoTo::startCond()
{
	return !this->stopCond();
}

bool GoTo::stopCond()
{
	float curXInPixel = this->_robot->getX();
	float curYInPixel = this->_robot->getY();

	float deltaXInPixel = _goal->X() - curXInPixel;
	float deltaYInPixel = curYInPixel - _goal->Y(); // the Y axis are reversed

	float deltaXInMeter = this->_robot->convertPixelToMeter(deltaXInPixel);
	float deltaYInMeter = this->_robot->convertPixelToMeter(deltaYInPixel);

	// check if we achieved the goal within the tolerance radius
	float distance = sqrt(pow(deltaXInMeter,2) + pow(deltaYInMeter,2));
	if(distance < MAX_DIFF_RADIUS)
	{
		// we achieved the goal.. stop the robot
		this->_robot->setSpeed(0,0);
		return true;
	}

	float curYawInDegree = this->_robot->getYaw();
	while(curYawInDegree < 0)
		curYawInDegree += 360;

	// check if the goal is in front of us with MAX_DIFF_YAW tolerance
	double goalYawInDegree = getDegree(deltaXInMeter, deltaYInMeter);

	double difYawInDegree = curYawInDegree - goalYawInDegree;
	if(difYawInDegree < MAX_DIFF_YAW && difYawInDegree > -MAX_DIFF_YAW)
	{
		return false;
	}
	this->_robot->setSpeed(0, 0);
	this->_nextBehaviors.clear();
	this->addNext(new StraightToLeft(this->_robot, this));
	this->addNext(new StraightToRight(this->_robot, this));
	else if((difYawInDegree <= 0 && difYawInDegree >= -180) || (difYawInDegree <= 360 && difYawInDegree >= 180)) // turn right
	{
		this->_robot->setSpeed(0,0);
		//this->_robot->setSpeed(TURN_SPEED, ANGULAR_SPEED); //turn left
		this->_nextBehaviors.clear();
		this->addNext(new StraightToLeft(this));
		return true;
	}
	else // turn right
	{
		this->_robot->setSpeed(0,0);
		this->_nextBehaviors.clear();
		this->addNext(new StraightToRight(this));
		return true;
		//this->_robot->setSpeed(TURN_SPEED, -ANGULAR_SPEED);
	}
}

GoTo::~GoTo() {
	// TODO Auto-generated destructor stub
}
